
#include "fake_MOX.h"

//=======================================================
  int main( int argc, char** argv )
//=======================================================
{


  ros::init(argc, argv, "fake_MOX");
  ros::NodeHandle n;
  ros::Rate r(1000);

//receiving chemical value.
  ros::Subscriber sub = n.subscribe("ChemicalValue", 1000, chemicalCallback);

//robot pose
ros::Subscriber amcl_sub = n.subscribe("/amcl_pose", 10, amclCallback);

//rqt_plot:
  ros::Publisher readings = n.advertise<msgs_and_srvs::readings>("sensor_readings", 10);

//Service for sensor position
  ros::ServiceClient client = n.serviceClient<msgs_and_srvs::SensorPosition>("odor_value");

//sensor display marker
  ros::Publisher marker_pub = n.advertise<visualization_msgs::Marker>("sensor_display", 100);

  n.getParam("/simulated_MOX/sensor0_hight",sensor0);
  n.getParam("/simulated_MOX/sensor1_hight",sensor1);
  n.getParam("/simulated_MOX/sensor2_hight",sensor2);          
  n.getParam("/simulated_MOX/sensor0_model",robot_0_sensor_model);
  n.getParam("/simulated_MOX/sensor1_model",robot_1_sensor_model);
  n.getParam("/simulated_MOX/sensor2_model",robot_2_sensor_model);

//sensor
  sensor[0].header.frame_id =sensor[1].header.frame_id =sensor[2].header.frame_id = "/map";
  sensor[0].header.stamp =sensor[1].header.stamp=sensor[2].header.stamp = ros::Time::now();
  sensor[0].ns =sensor[1].ns=sensor[2].ns = "sensor_visualization";
  sensor[0].action =sensor[1].action =sensor[2].action =visualization_msgs::Marker::ADD;
  sensor[0].type = sensor[1].type = sensor[2].type = visualization_msgs::Marker::SPHERE;
  sensor[0].id=0;
  sensor[1].id=1;
  sensor[2].id=2;
//sensor color/size
  sensor[0].scale.x =sensor[1].scale.x =sensor[2].scale.x = 0.5;
  sensor[0].scale.y =sensor[1].scale.y =sensor[2].scale.y = 0.5;
  sensor[0].scale.z =sensor[1].scale.z =sensor[2].scale.z = 0.25;
  sensor[0].color.r =sensor[1].color.r =sensor[2].color.r = 2.0f;
  sensor[0].color.g =sensor[1].color.g =sensor[2].color.g = 1.0f;
  sensor[0].color.a =sensor[1].color.a =sensor[2].color.a = 1.0;
//connector:
  connector[0].header.frame_id =connector[1].header.frame_id =connector[2].header.frame_id = "/map";
  connector[0].header.stamp =connector[1].header.stamp=connector[2].header.stamp = ros::Time::now();
  connector[0].ns =connector[1].ns=connector[2].ns = "sensor_visualization";
  connector[0].action =connector[1].action =connector[2].action =visualization_msgs::Marker::ADD;
  connector[0].type = connector[1].type = connector[2].type = visualization_msgs::Marker::CYLINDER;
  connector[0].id=3;
  connector[1].id=4;
  connector[2].id=5;
//connector color/size
  connector[0].scale.x =connector[1].scale.x =connector[2].scale.x = 0.1;
  connector[0].scale.y =connector[1].scale.y =connector[2].scale.y = 0.1;
  connector[0].color.a =connector[1].color.a =connector[2].color.a = 1.0;
  connector[0].color.r = 1.0f;
  connector[1].color.b = 1.0f;
  connector[2].color.g = 1.0f;
  connector[0].scale.z =sensor0; 
  connector[1].scale.z = sensor1;
  connector[2].scale.z = sensor2;


  while (ros::ok())
  {



  srv.request.x_r0 = int(amcl_pos.pose.pose.position.x); 
  srv.request.y_r0 = int(amcl_pos.pose.pose.position.y); 
  srv.request.z_r0 = sensor0;

  srv.request.x_r1 = int(amcl_pos.pose.pose.position.x);
  srv.request.y_r1 = int(amcl_pos.pose.pose.position.y);
  srv.request.z_r1 = sensor1;

  srv.request.x_r2 = int(amcl_pos.pose.pose.position.x);
  srv.request.y_r2 = int(amcl_pos.pose.pose.position.y);
  srv.request.z_r2 = sensor2;


  if (client.call(srv))
     {
     //checks of missing any subscribed value
     servive_val[0]=(float)srv.response.odor_r0;
     servive_val[1]=(float)srv.response.odor_r1;
     servive_val[2]=(float)srv.response.odor_r2;
     }

//sensor response
  response.r0_val=(sensor_response(servive_val[0], ch_id, 0,robot_0_sensor_model,sensor0_log));
  response.r1_val=(sensor_response(servive_val[1], ch_id, 1,robot_1_sensor_model,sensor1_log));
  response.r2_val=(sensor_response(servive_val[2], ch_id, 2,robot_2_sensor_model,sensor2_log));
  initial = false;

//concentration
  response.r0_con=servive_val[0];
  response.r1_con=servive_val[1];
  response.r2_con=servive_val[2];

//sensor_0:
  sensor[0].pose.position.x = amcl_pos.pose.pose.position.x;
  sensor[0].pose.position.y = amcl_pos.pose.pose.position.y;
  sensor[0].pose.position.z = amcl_pos.pose.pose.position.z+sensor0;

//sensor_1:
  sensor[1].pose.position.x = amcl_pos.pose.pose.position.x;
  sensor[1].pose.position.y =amcl_pos.pose.pose.position.y;
  sensor[1].pose.position.z = amcl_pos.pose.pose.position.z+sensor1;

//sensor_2:
  sensor[2].pose.position.x = amcl_pos.pose.pose.position.x;
  sensor[2].pose.position.y = amcl_pos.pose.pose.position.y;
  sensor[2].pose.position.z = amcl_pos.pose.pose.position.z+sensor2;

//connector_0:
    connector[0].pose.position.x = amcl_pos.pose.pose.position.x;
    connector[0].pose.position.y = amcl_pos.pose.pose.position.y;
    connector[0].pose.position.z = float(sensor0)/2;

//connector_1:
    connector[1].pose.position.x = amcl_pos.pose.pose.position.x;
    connector[1].pose.position.y = amcl_pos.pose.pose.position.y;
    connector[1].pose.position.z = float(sensor1)/2;

//connector_2:
    connector[2].pose.position.x = amcl_pos.pose.pose.position.x;
    connector[2].pose.position.y = amcl_pos.pose.pose.position.y;
    connector[2].pose.position.z = float(sensor2)/2;

//Publishing sensor and connectior display:
  for(int j=0;j<=2;j++)
     {
     marker_pub.publish(sensor[j]);
     marker_pub.publish(connector[j]);
     }

//Publishing value for rxplot
  readings.publish(response);
  writeTofile(response);

  ros::spinOnce();
  r.sleep();
}
 
}

//===================================================================================
float sensor_response(float concentration, int ch_id, int sensor_id, int sensor_model,float* sensor)
//===================================================================================

{

//initial sensor values:
  if(initial==true)
      {
      if(sensor_model==0){filtered_resp[sensor_id]= 21;sensor[counter[sensor_id]]=21;}
      if(sensor_model==1 && ch_id!=2){filtered_resp[sensor_id]= 1;sensor[counter[sensor_id]]=1;}
      if(sensor_model==2){filtered_resp[sensor_id]= 8.7;sensor[counter[sensor_id]]=8.7;}
  		   
      return filtered_resp[sensor_id];
      }

  if(concentration==0)
      {
      if(sensor_model==0){y_out=21;}
      if(sensor_model==1){y_out=1;}
      if(sensor_model==2){y_out=8.7;}
      }
  else {  
			
//A*e^B + C*e^D
  if(ch_id<3)    //response for ethanol, methan and hydeogen
     y_out= (cons[sensor_model][ch_id][0]* exp(cons[sensor_model][ch_id][1] * concentration))+(cons[sensor_model][ch_id][2]* exp(cons[sensor_model][ch_id][3]* concentration)) ;
  else           //response for all other gases
     y_out= (cons[sensor_model][0][0]* exp(cons[sensor_model][0][1] * concentration))+(cons[sensor_model][0][2]* exp(cons[sensor_model][0][3]* concentration)) ;
 }

//storing sensor response in array for comparision:
  sensor[counter[sensor_id]]=y_out;

//comparision between last value and current value:
//decay:
  if(sensor[counter[sensor_id]]>sensor[counter[sensor_id]-1]) {tau=40.7*0.15;}

//rise:
  if(sensor[counter[sensor_id]]<sensor[counter[sensor_id]-1])  {tau=7.4*0.04;}

//alpha value
  a=1/(tau+1);

//filtered response:
  filtered_resp[sensor_id]=(a* y_out)+(1-a)*filtered_resp[sensor_id];
			
  counter[sensor_id]++;

//TGS2600 hydrogen response=0.1.
  if(sensor_model==1 && ch_id==2){filtered_resp[sensor_id]= 0.100000;} 

  return filtered_resp[sensor_id]; 

}




//====================================================================
void amclCallback(const geometry_msgs::PoseWithCovarianceStamped& msg)
//====================================================================
{
	amcl_pos.pose.pose.position.x = msg.pose.pose.position.x;
	amcl_pos.pose.pose.position.y = msg.pose.pose.position.y;
	amcl_pos.pose.pose.position.z = msg.pose.pose.position.z;

}


//========================================================================
  void chemicalCallback(const msgs_and_srvs::ChemicalValue::ConstPtr& msg)
//========================================================================
{
	ch_id=msg->id;

}

//========================================================================
  void  writeTofile       (msgs_and_srvs::readings response)
//========================================================================
{
static FILE *file;

file = fopen("/home/victor/ros_catkin/odor_simulation_ws/src/simulated_MOX/src/sensor_log.txt", "a");
  if (file == NULL) {
    fprintf(stderr, "Error opening sensor_log.txt\n");
    exit(1);
  }

fprintf (file, "%f %f %f\n", response.r0_val,response.r1_val,response.r2_val);

fclose(file);

}















