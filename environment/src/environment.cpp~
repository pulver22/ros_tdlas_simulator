#include <ros/ros.h>
#include <visualization_msgs/Marker.h>
#include <cmath>
#include "SourceLoc.h"
##include <msgs_and_srvs/SourceLoc.h>
//#include "/home/ali/ros_tutorials/odor_simulation/dispersion_simulation/src/foamToFilament.h"

int main( int argc, char** argv )
{

  
ros::init(argc, argv, "environment");
  ros::NodeHandle n;
  ros::Publisher marker_pub = n.advertise<visualization_msgs::Marker>("environment_visualization", 10);
  ros::Publisher SourceLoc = n.advertise<msgs_and_srvs::SourceLoc>("SourceLoc", 1000);

			double sourcelocation;
			//printf("\nSource location?\n");
			//std::cin>>sourcelocation;


n.getParam("environment/source_height",sourcelocation);

  //source position
  float source_pos_x=2;
  float source_pos_y=10;
  double source_pos_z =(float)sourcelocation;

 

  ros::Rate r(1000);

  while (ros::ok())
  {

    visualization_msgs::Marker obstacle[5], source[2];
    obstacle[0].header.frame_id= obstacle[1].header.frame_id= obstacle[3].header.frame_id= obstacle[4].header.frame_id= obstacle[2].header.frame_id =source[0].header.frame_id=source[1].header.frame_id= "/map";

    obstacle[0].header.stamp= obstacle[1].header.stamp =obstacle[2].header.stamp=obstacle[3].header.stamp=obstacle[4].header.stamp=source[0].header.stamp=source[1].header.stamp = ros::Time::now();

    obstacle[0].ns =obstacle[1].ns =obstacle[2].ns=obstacle[3].ns=obstacle[4].ns=source[0].ns =source[1].ns = "environment_visualization";
    obstacle[0].action =obstacle[1].action=obstacle[2].action=obstacle[3].action=obstacle[4].action =source[0].action =source[1].action = visualization_msgs::Marker::ADD;

  obstacle[0].id=0;
  obstacle[1].id=1;
  obstacle[2].id=2;
  obstacle[3].id=3;
  obstacle[4].id=4;
  source[0].id=5;
  source[1].id=6;

  obstacle[0].type =obstacle[1].type=obstacle[2].type=obstacle[3].type=obstacle[4].type =    visualization_msgs::Marker::CUBE;
  source[0].type=source[1].type=visualization_msgs::Marker::CYLINDER;

//obstacle_1
    obstacle[0].scale.x = 6;
    obstacle[0].scale.y = 8;
    obstacle[0].scale.z = 5;
    obstacle[0].color.g = 0.6f;
    obstacle[0].color.b = 0.4f;
    obstacle[0].color.a = 1.0;
    obstacle[0].pose.position.x = 15;
    obstacle[0].pose.position.y = 14;
    obstacle[0].pose.position.z = 2.5;

//obstacle_2
    obstacle[1].scale.x = 6;
    obstacle[1].scale.y = 6;
    obstacle[1].scale.z = 5;
    obstacle[1].color.g = 0.6f;
    obstacle[1].color.b = 0.4f;
    obstacle[1].color.a = 1.0;
    obstacle[1].pose.position.x = 45;
    obstacle[1].pose.position.y = 6;
    obstacle[1].pose.position.z = 2.5;

//side wall
    obstacle[2].scale.x = 78;
    obstacle[2].scale.y = 2;
    obstacle[2].scale.z = 5;
    obstacle[2].color.b = 1.0f;
    obstacle[2].color.a = 1.0;
    obstacle[2].pose.position.x = 20;
    obstacle[2].pose.position.y = 38;
    obstacle[2].pose.position.z = 2.5;

//back wall
    obstacle[3].scale.x = 2;
    obstacle[3].scale.y = 46;
    obstacle[3].scale.z = 5;
    obstacle[3].color.b = 1.0f;
    obstacle[3].color.a = 1.0;
    obstacle[3].pose.position.x = -18;
    obstacle[3].pose.position.y = 14;
    obstacle[3].pose.position.z = 2.5;

//front wall
    obstacle[4].scale.x = 2;
    obstacle[4].scale.y = 46;
    obstacle[4].scale.z = 5;
    obstacle[4].color.b = 1.0f;
    obstacle[4].color.a = 1.0;
    obstacle[4].pose.position.x = 58;
    obstacle[4].pose.position.y = 14;
    obstacle[4].pose.position.z = 2.5;

    //Source
    source[0].scale.x = 0.5;
    source[0].scale.y = 0.5;
    source[0].scale.z = 2.2;
    source[0].color.g = 0.6f;
    source[0].color.b = 0.4f;
    source[0].color.a = 0.6;
    source[0].pose.position.x = source_pos_x-1.5;
    source[0].pose.position.y = source_pos_y;
    source[0].pose.position.z = source_pos_z;
    source[0].pose.orientation.x = 0.0;
    source[0].pose.orientation.y = 1.0;
    source[0].pose.orientation.z = 0.0;
    source[0].pose.orientation.w = 1.0;

    source[1].scale.x = 0.5;
    source[1].scale.y = 0.5;
    source[1].scale.z = source_pos_z;
    source[1].color.g = 0.6f;
    source[1].color.b = 0.4f;
    source[1].color.a = 0.6;
    source[1].pose.position.x = source_pos_x-2;
    source[1].pose.position.y = source_pos_y;
    source[1].pose.position.z = source_pos_z/2;

//source location publisher
    msgs_and_srvs::SourceLoc sourceloc;
    sourceloc.loc=source_pos_z;//sourcelocation;

	for(int i=0;i<=4;i++){
    		marker_pub.publish(obstacle[i]);
		}

    		marker_pub.publish(source[0]);
    		marker_pub.publish(source[1]);

		//publishing the source location
		SourceLoc.publish(sourceloc);

    r.sleep();
  }
}
