"""autogenerated by genmsg_py from SensorPositionRequest.msg. Do not edit."""
import roslib.message
import struct


class SensorPositionRequest(roslib.message.Message):
  _md5sum = "16880e9c223a3484da7d3e9743e80d4d"
  _type = "dispersion_simulation/SensorPositionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 x_r0
int64 y_r0
int64 z_r0
int64 x_r1
int64 y_r1
int64 z_r1
int64 x_r2
int64 y_r2
int64 z_r2

"""
  __slots__ = ['x_r0','y_r0','z_r0','x_r1','y_r1','z_r1','x_r2','y_r2','z_r2']
  _slot_types = ['int64','int64','int64','int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       x_r0,y_r0,z_r0,x_r1,y_r1,z_r1,x_r2,y_r2,z_r2
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SensorPositionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_r0 is None:
        self.x_r0 = 0
      if self.y_r0 is None:
        self.y_r0 = 0
      if self.z_r0 is None:
        self.z_r0 = 0
      if self.x_r1 is None:
        self.x_r1 = 0
      if self.y_r1 is None:
        self.y_r1 = 0
      if self.z_r1 is None:
        self.z_r1 = 0
      if self.x_r2 is None:
        self.x_r2 = 0
      if self.y_r2 is None:
        self.y_r2 = 0
      if self.z_r2 is None:
        self.z_r2 = 0
    else:
      self.x_r0 = 0
      self.y_r0 = 0
      self.z_r0 = 0
      self.x_r1 = 0
      self.y_r1 = 0
      self.z_r1 = 0
      self.x_r2 = 0
      self.y_r2 = 0
      self.z_r2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_9q.pack(_x.x_r0, _x.y_r0, _x.z_r0, _x.x_r1, _x.y_r1, _x.z_r1, _x.x_r2, _x.y_r2, _x.z_r2))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.x_r0, _x.y_r0, _x.z_r0, _x.x_r1, _x.y_r1, _x.z_r1, _x.x_r2, _x.y_r2, _x.z_r2,) = _struct_9q.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_9q.pack(_x.x_r0, _x.y_r0, _x.z_r0, _x.x_r1, _x.y_r1, _x.z_r1, _x.x_r2, _x.y_r2, _x.z_r2))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.x_r0, _x.y_r0, _x.z_r0, _x.x_r1, _x.y_r1, _x.z_r1, _x.x_r2, _x.y_r2, _x.z_r2,) = _struct_9q.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_9q = struct.Struct("<9q")
"""autogenerated by genmsg_py from SensorPositionResponse.msg. Do not edit."""
import roslib.message
import struct


class SensorPositionResponse(roslib.message.Message):
  _md5sum = "b6778290ffc65008d5f265f8117abaa9"
  _type = "dispersion_simulation/SensorPositionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 odor_r0
float64 odor_r1
float64 odor_r2


"""
  __slots__ = ['odor_r0','odor_r1','odor_r2']
  _slot_types = ['float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       odor_r0,odor_r1,odor_r2
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SensorPositionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.odor_r0 is None:
        self.odor_r0 = 0.
      if self.odor_r1 is None:
        self.odor_r1 = 0.
      if self.odor_r2 is None:
        self.odor_r2 = 0.
    else:
      self.odor_r0 = 0.
      self.odor_r1 = 0.
      self.odor_r2 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.odor_r0, _x.odor_r1, _x.odor_r2))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.odor_r0, _x.odor_r1, _x.odor_r2,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.odor_r0, _x.odor_r1, _x.odor_r2))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.odor_r0, _x.odor_r1, _x.odor_r2,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3d = struct.Struct("<3d")
class SensorPosition(roslib.message.ServiceDefinition):
  _type          = 'dispersion_simulation/SensorPosition'
  _md5sum = '59dccf8e8b9bdc18fca94ac09ffb236f'
  _request_class  = SensorPositionRequest
  _response_class = SensorPositionResponse
