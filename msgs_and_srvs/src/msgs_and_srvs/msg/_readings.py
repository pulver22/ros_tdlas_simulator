"""autogenerated by genpy from msgs_and_srvs/readings.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class readings(genpy.Message):
  _md5sum = "430fcebc758b34df5ca08669cef51d20"
  _type = "msgs_and_srvs/readings"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 r0_id
float64 r0_x
float64 r0_y
float64 r0_z
float64 r0_val
float64 r1_id
float64 r1_x
float64 r1_y
float64 r1_z
float64 r1_val
float64 r2_id
float64 r2_x
float64 r2_y
float64 r2_z
float64 r2_val
float64 r0_con
float64 r1_con
float64 r2_con

"""
  __slots__ = ['r0_id','r0_x','r0_y','r0_z','r0_val','r1_id','r1_x','r1_y','r1_z','r1_val','r2_id','r2_x','r2_y','r2_z','r2_val','r0_con','r1_con','r2_con']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       r0_id,r0_x,r0_y,r0_z,r0_val,r1_id,r1_x,r1_y,r1_z,r1_val,r2_id,r2_x,r2_y,r2_z,r2_val,r0_con,r1_con,r2_con

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(readings, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.r0_id is None:
        self.r0_id = 0.
      if self.r0_x is None:
        self.r0_x = 0.
      if self.r0_y is None:
        self.r0_y = 0.
      if self.r0_z is None:
        self.r0_z = 0.
      if self.r0_val is None:
        self.r0_val = 0.
      if self.r1_id is None:
        self.r1_id = 0.
      if self.r1_x is None:
        self.r1_x = 0.
      if self.r1_y is None:
        self.r1_y = 0.
      if self.r1_z is None:
        self.r1_z = 0.
      if self.r1_val is None:
        self.r1_val = 0.
      if self.r2_id is None:
        self.r2_id = 0.
      if self.r2_x is None:
        self.r2_x = 0.
      if self.r2_y is None:
        self.r2_y = 0.
      if self.r2_z is None:
        self.r2_z = 0.
      if self.r2_val is None:
        self.r2_val = 0.
      if self.r0_con is None:
        self.r0_con = 0.
      if self.r1_con is None:
        self.r1_con = 0.
      if self.r2_con is None:
        self.r2_con = 0.
    else:
      self.r0_id = 0.
      self.r0_x = 0.
      self.r0_y = 0.
      self.r0_z = 0.
      self.r0_val = 0.
      self.r1_id = 0.
      self.r1_x = 0.
      self.r1_y = 0.
      self.r1_z = 0.
      self.r1_val = 0.
      self.r2_id = 0.
      self.r2_x = 0.
      self.r2_y = 0.
      self.r2_z = 0.
      self.r2_val = 0.
      self.r0_con = 0.
      self.r1_con = 0.
      self.r2_con = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_18d.pack(_x.r0_id, _x.r0_x, _x.r0_y, _x.r0_z, _x.r0_val, _x.r1_id, _x.r1_x, _x.r1_y, _x.r1_z, _x.r1_val, _x.r2_id, _x.r2_x, _x.r2_y, _x.r2_z, _x.r2_val, _x.r0_con, _x.r1_con, _x.r2_con))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 144
      (_x.r0_id, _x.r0_x, _x.r0_y, _x.r0_z, _x.r0_val, _x.r1_id, _x.r1_x, _x.r1_y, _x.r1_z, _x.r1_val, _x.r2_id, _x.r2_x, _x.r2_y, _x.r2_z, _x.r2_val, _x.r0_con, _x.r1_con, _x.r2_con,) = _struct_18d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_18d.pack(_x.r0_id, _x.r0_x, _x.r0_y, _x.r0_z, _x.r0_val, _x.r1_id, _x.r1_x, _x.r1_y, _x.r1_z, _x.r1_val, _x.r2_id, _x.r2_x, _x.r2_y, _x.r2_z, _x.r2_val, _x.r0_con, _x.r1_con, _x.r2_con))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 144
      (_x.r0_id, _x.r0_x, _x.r0_y, _x.r0_z, _x.r0_val, _x.r1_id, _x.r1_x, _x.r1_y, _x.r1_z, _x.r1_val, _x.r2_id, _x.r2_x, _x.r2_y, _x.r2_z, _x.r2_val, _x.r0_con, _x.r1_con, _x.r2_con,) = _struct_18d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_18d = struct.Struct("<18d")
