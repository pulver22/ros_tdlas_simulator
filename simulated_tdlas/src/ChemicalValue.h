/* Auto-generated by genmsg_cpp for file /home/ali/ros_workspace/odor_simulation/msgs_and_srvs/msg/ChemicalValue.msg */
#ifndef MSGS_AND_SRVS_MESSAGE_CHEMICALVALUE_H
#define MSGS_AND_SRVS_MESSAGE_CHEMICALVALUE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace msgs_and_srvs
{
template <class ContainerAllocator>
struct ChemicalValue_ {
  typedef ChemicalValue_<ContainerAllocator> Type;

  ChemicalValue_()
  : id(0)
  {
  }

  ChemicalValue_(const ContainerAllocator& _alloc)
  : id(0)
  {
  }

  typedef int64_t _id_type;
  int64_t id;


  typedef boost::shared_ptr< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ChemicalValue
typedef  ::msgs_and_srvs::ChemicalValue_<std::allocator<void> > ChemicalValue;

typedef boost::shared_ptr< ::msgs_and_srvs::ChemicalValue> ChemicalValuePtr;
typedef boost::shared_ptr< ::msgs_and_srvs::ChemicalValue const> ChemicalValueConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace msgs_and_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ef7df1d34137d3879d089ad803388efa";
  }

  static const char* value(const  ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xef7df1d34137d387ULL;
  static const uint64_t static_value2 = 0x9d089ad803388efaULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> > {
  static const char* value() 
  {
    return "msgs_and_srvs/ChemicalValue";
  }

  static const char* value(const  ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 id \n\
\n\
\n\
";
  }

  static const char* value(const  ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ChemicalValue_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::msgs_and_srvs::ChemicalValue_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MSGS_AND_SRVS_MESSAGE_CHEMICALVALUE_H

